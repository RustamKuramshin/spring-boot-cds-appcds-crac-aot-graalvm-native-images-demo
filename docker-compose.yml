services:
  petclinic:
    build:
      dockerfile: Dockerfile
      context: .
    container_name: petclinic
    restart: always
    ports:
      - "8090:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=postgres
      - POSTGRES_URL=jdbc:postgresql://petclinic-db:5432/petclinic
      - SPRING_APPLICATION_NAME=petclinic
      - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=20
      - SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE=10
      - SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT=30000
      - SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT=600000
      - SPRING_DATASOURCE_HIKARI_MAX_LIFETIME=1800000
    tty: true

  petclinic-aot:
    build:
      dockerfile: DockerfileAOT
      context: .
    container_name: petclinic-aot
    restart: always
    ports:
      - "8091:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=postgres
      - POSTGRES_URL=jdbc:postgresql://petclinic-db:5432/petclinicaot
      - SPRING_APPLICATION_NAME=petclinic-aot
      - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=20
      - SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE=10
      - SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT=30000
      - SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT=600000
      - SPRING_DATASOURCE_HIKARI_MAX_LIFETIME=1800000
    tty: true

  petclinic-cds:
    build:
      dockerfile: DockerfileCDS
      context: .
    container_name: petclinic-cds
    restart: always
    ports:
      - "8092:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=postgres
      - POSTGRES_URL=jdbc:postgresql://petclinic-db:5432/petcliniccds
      - SPRING_APPLICATION_NAME=petclinic-cds
      - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=20
      - SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE=10
      - SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT=30000
      - SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT=600000
      - SPRING_DATASOURCE_HIKARI_MAX_LIFETIME=1800000
    tty: true

  petclinic-crac:
    build:
      dockerfile: DockerfileCRaC
      context: .
    container_name: petclinic-crac
    restart: no
    ports:
      - "8093:8080"
    environment:
      - SPRING_APPLICATION_NAME=petclinic-crac
      - CRAC_RESTORE
      - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=20
      - SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE=10
      - SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT=30000
      - SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT=600000
      - SPRING_DATASOURCE_HIKARI_MAX_LIFETIME=1800000
    tty: true
    cap_add:
      - CHECKPOINT_RESTORE
      - SYS_PTRACE
    volumes:
      - ./crac-files:/app/crac-files
    command: >
      sh -c "
      if [ \"$CRAC_RESTORE\" = \"true\" ]; then
        java -XX:CRaCRestoreFrom=/app/crac-files;
      else
        java -XX:CRaCCheckpointTo=/app/crac-files -jar spring-petclinic.jar;
      fi
      "

  petclinic-native:
    build:
      dockerfile: DockerfileNative
      context: .
    container_name: petclinic-native
    restart: always
    ports:
      - "8094:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=postgres
      - POSTGRES_URL=jdbc:postgresql://petclinic-db:5432/petclinicnative
      - SPRING_APPLICATION_NAME=petclinic-native
      - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=20
      - SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE=10
      - SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT=30000
      - SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT=600000
      - SPRING_DATASOURCE_HIKARI_MAX_LIFETIME=1800000
    tty: true

  petclinic-db:
    build:
      dockerfile: ./Dockerfile
      context: postgres
    container_name: petclinic-db
    ports:
      - "35432:5432"
    restart: always
    volumes:
      - petclinic_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    environment:
      - POSTGRES_USER=petclinic
      - POSTGRES_PASSWORD=petclinic
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  # http://localhost:23000/
  grafana:
    build: './monitoring/config/grafana'
    container_name: grafana
    ports:
      - "23000:3000"
    restart: always
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

  # http://localhost:29090/
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "29090:9090"
    restart: always
    volumes:
      - ./monitoring/config/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--log.level=debug'

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    restart: always
    ports:
      - "9090:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro

volumes:
  petclinic_data:
  grafana_data:
